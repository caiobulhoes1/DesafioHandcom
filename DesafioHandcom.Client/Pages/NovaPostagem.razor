@page "/novapostagem"
@using System.Security.Claims

@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject SweetAlertService swal
@inject NavigationManager NavManager

<PageTitle>Nova Postagem</PageTitle>
<div class="mainPage">
	<div class="title">
		<h1>Nova Postagem</h1>
	</div>

	<div class="form-container">
		<EditForm Context="NovaPostagem" Model="post" OnSubmit="NewPost">
			<div class="input">
				<label for="title">Título:</label>
				<input type="text" id="Title" @bind-value="post.Title" placeholder="Title" required><br><br>
				<label for="content">Conteúdo:</label>
				<textarea id="Content" @bind="post.Content" placeholder="Content" rows="2" required></textarea>
				<label for="content">Tópico:</label>
				<select class="form-select" @bind="post.TopicId" required>
					<option value="">Selecione uma Opção</option>
					@foreach (var topic in topics)
					{
						<option value="@topic.Id">@topic.Name</option>
					}
				</select><br>
				<input class="btnLogin" type="submit" value="Finalizar Postagem">
			</div>
		</EditForm>
	</div>
</div>

@code {
	private string NomeUser = "";
	private string IdUser = string.Empty;

	PostModel post = new PostModel();
	List<TopicModel> topics = new List<TopicModel>();

	protected override async Task OnInitializedAsync()
	{
		//Resgata o usuário logado.
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		if (authState.User.Identity.IsAuthenticated)
		{
			NomeUser = authState.User.FindFirst(c => c.Type == "unique_name")?.Value;
			IdUser = authState.User.FindFirst(c => c.Type == "Id")?.Value;


			//Resgata os Topicos cadastrados no banco de dados
			var result = await Http.GetFromJsonAsync<List<TopicModel>>("GetTopics");
			if (result != null)
				topics = result;
		}
		else
		{
			NavManager.NavigateTo("/");
		}
		
	}

	async Task NewPost()
	{
		post.AuthorId = int.Parse(IdUser);
		post.CreatedAt = DateTime.Now;

		try
		{
			//Faz requisição post para adicionar postagem
			var result = await Http.PostAsJsonAsync("/api/posts", post);
			if (result.IsSuccessStatusCode)
			{
				//Postagem Criada
				await swal.FireAsync(new SweetAlertOptions
					{
						Title = "Sucesso!",
						Text = "Postagem criada!",
						Icon = SweetAlertIcon.Success
					});
			}
			else
			{
				//Erro ao criar postagem - Mensagem de Erro.
				string errorMessage = await result.Content.ReadAsStringAsync();
				
				await swal.FireAsync(new SweetAlertOptions
					{
						Title = "Erro!",
						Text = $"{errorMessage}",
						Icon = SweetAlertIcon.Error
					});
			}
			NavManager.NavigateTo("/feed");
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
}
